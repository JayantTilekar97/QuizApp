{"ast":null,"code":"var _jsxFileName = \"/home/am-pc-32/Documents/interview/src/components/Compo.js\";\nimport React from 'react';\nimport Test6 from './Test6';\nimport './Test6';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Compo(props) {\n  let optionlist;\n  let type = props.type;\n  let handleRadio = props.handleRadio;\n  let options = props.options;\n  let curnum = props.curnum;\n  let handleCheck = props.handleCheck;\n\n  if (type == \"Single\") {\n    let ansarr = [];\n    let temparr = [];\n    let temp = localStorage.getItem(\"test\");\n    temparr = JSON.parse(temp);\n    ansarr = temparr.ans;\n    console.log(ansarr[curnum]);\n    console.log(curnum);\n\n    if (typeof ansarr[curnum] == \"undefined\") {\n      optionlist = options.map((optn, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: index,\n          onClick: handleRadio,\n          type: \"radio\",\n          name: \"option\",\n          value: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: index,\n          children: optn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 90\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 8\n      }, this));\n    } else {\n      ansoptn = ansarr[curnum];\n      optionlist = options.map((optn, index) => ansarr[curnum] == index.toString() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: index,\n            checked: true,\n            onClick: handleRadio,\n            type: \"radio\",\n            name: \"option\",\n            value: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: index,\n            children: optn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 108\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: index,\n            onClick: handleRadio,\n            type: \"radio\",\n            name: \"option\",\n            value: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: index,\n            children: optn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 93\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false));\n    }\n  } else {\n    let ansarr = [];\n    let temparr = [];\n    let temp = localStorage.getItem(\"test\");\n    temparr = JSON.parse(temp);\n    ansarr = temparr.ans;\n\n    if (typeof ansarr[curnum] == \"undefined\") {\n      optionlist = options.map((optn, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onClick: handleCheck,\n          type: \"checkbox\",\n          name: index,\n          value: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: index,\n          children: optn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this));\n    } else {\n      multioptn = ansarr[curnum];\n      optionlist = options.map((optn, index) => ansarr[curnum].includes(index.toString()) == true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onClick: handleCheck,\n            checked: \"true\",\n            type: \"checkbox\",\n            name: index,\n            value: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: index,\n            children: optn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onClick: handleCheck,\n            type: \"checkbox\",\n            name: index,\n            value: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: index,\n            children: optn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 12\n        }, this)\n      }, void 0, false));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: optionlist\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_c = Compo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Compo\");","map":{"version":3,"sources":["/home/am-pc-32/Documents/interview/src/components/Compo.js"],"names":["React","Test6","Compo","props","optionlist","type","handleRadio","options","curnum","handleCheck","ansarr","temparr","temp","localStorage","getItem","JSON","parse","ans","console","log","map","optn","index","ansoptn","toString","multioptn","includes"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Test6 from './Test6'\nimport {} from './Test6'\nexport default function Compo(props) {\n\n    let optionlist\n    let type = props.type\n    let handleRadio = props.handleRadio\n    let options = props.options\n    let curnum = props.curnum\n    let handleCheck = props.handleCheck\n\n    if(type == \"Single\"){\n    \n        let ansarr = []\n        let temparr = []\n        let temp = localStorage.getItem(\"test\");\n        temparr = JSON.parse(temp);\n        ansarr = temparr.ans\n         console.log(ansarr[curnum])\n         console.log(curnum)\n       \n        if(typeof ansarr[curnum] == \"undefined\")\n        {\n        optionlist = options.map((optn,index) =>\n       <div>\n      <input  id={index} onClick={handleRadio} type=\"radio\" name=\"option\" value={index}/><label for={index}>{optn}</label>\n      </div>);\n      }\n        else{\n            ansoptn = ansarr[curnum]\n          optionlist = options.map((optn,index) =>\n          (ansarr[curnum] == index.toString())\n          ?\n        <><div>\n         <input  id={index} checked={true} onClick={handleRadio} type=\"radio\" name=\"option\" value={index}/><label for={index}>{optn}</label>\n         </div></>\n         :<><div>\n         <input  id={index} onClick={handleRadio} type=\"radio\" name=\"option\" value={index}/><label for={index}>{optn}</label>\n         </div></>\n       );\n        }\n      }\n     else{\n        let ansarr = []\n        let temparr = []\n        let temp = localStorage.getItem(\"test\");\n        temparr = JSON.parse(temp);\n        ansarr = temparr.ans\n        \n        if(typeof ansarr[curnum] == \"undefined\")\n        {\n            optionlist = options.map((optn,index) =>\n            <div class=\"checkbox\">\n            <input onClick={handleCheck} type=\"checkbox\" name={index} value={index}/>\n            <label for={index}>{optn}</label>\n            </div>);\n        }\n      else{\n        multioptn = ansarr[curnum]\n        optionlist = options.map((optn,index) =>\n        (((ansarr[curnum]).includes(index.toString())) == true)\n          ?\n          <><div class=\"checkbox\">\n        <input onClick={handleCheck} checked=\"true\" type=\"checkbox\" name={index} value={index}/>\n        <label for={index}>{optn}</label>\n        </div></>\n        :<><div class=\"checkbox\">\n        <input onClick={handleCheck} type=\"checkbox\" name={index} value={index}/>\n        <label for={index}>{optn}</label>\n        </div></>\n        );\n       }\n     }\n\n\n    \n    return (\n        <div>\n            {optionlist}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}